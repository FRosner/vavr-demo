/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package vavr.demo;

import io.vavr.collection.CharSeq;
import io.vavr.collection.Seq;
import io.vavr.control.Try;
import io.vavr.control.Validation;

public class App {

  public static void main(String[] args) {
    Validation<Seq<String>, Person> valid = validatePerson("Frank", 20);
    System.out.println(valid);
    Validation<Seq<String>, Person> invalid = validatePerson("Frank!", 15);
    System.err.println(invalid);
  }

  public static Try<Person> tryFetchPerson(int id) {
    return (id % 2 == 0)
        ? Try.success()
  }

  public static Validation<Seq<String>, Person> validatePerson(String name, int age) {
    return Validation.combine(validateName(name), validateAge(age)).ap(Person::new);
  }

  private static Validation<String, String> validateName(String name) {
    String validNameChars = "[a-zA-Z ]";
    return CharSeq.of(name).replaceAll(validNameChars, "").transform(seq ->
        seq.isEmpty()
            ? Validation.valid(name)
            : Validation.invalid("Name contains invalid characters: '"
                + seq.distinct().sorted() + "'")
    );
  }

  private static Validation<String, Integer> validateAge(int age) {
    int minAge = 18;
    return age < minAge
        ? Validation.invalid("Age must be at least " + minAge)
        : Validation.valid(age);
  }
}

record Person(String lastName, int age) {

}
